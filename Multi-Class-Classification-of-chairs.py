# -*- coding: utf-8 -*-
"""Course 2 - Part 8 - Lesson 2 - Notebook (RockPaperScissors).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/lmoroney/dlaicourse/blob/master/Course%202%20-%20Part%208%20-%20Lesson%202%20-%20Notebook%20(RockPaperScissors).ipynb

##### Copyright 2019 The TensorFlow Authors.
"""

#@title Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import os

Accent_dir = os.path.join('/tmp/Chair/Accent')
Armpit_dir = os.path.join('/tmp/Chair/Armpit')
BarStool_dir = os.path.join('/tmp/Chair/Barstool')
Benches_dir = os.path.join('/tmp/Chair/Benches')
Beambag_dir = os.path.join('/tmp/Chair/Beambag')
DiningChairs_dir = os.path.join('/tmp/Chair/DiningChairs')
FootStall_dir = os.path.join('/tmp/Chair/FootStall')
GardenChairs_dir = os.path.join('/tmp/Chair/GardenChairs')
OfficeChairs_dir = os.path.join('/tmp/Chair/OfficeChairs')


print('total training Accent images:', len(os.listdir(Accent_dir)))
print('total training Armpit images:', len(os.listdir(Armpit_dir)))
print('total training BaarStool images:', len(os.listdir(BarStool_dir)))
print('total training Benches images:', len(os.listdir(Benches_dir)))
print('total training Beanbag images:', len(os.listdir(Beambag_dir)))
print('total training DiningChairs images:', len(os.listdir(DiningChairs_dir)))
print('total training FootStall images:', len(os.listdir(FootStall_dir)))
print('total training GardenChairs images:', len(os.listdir(GardenChairs_dir)))
print('total training OfficeChairs images:', len(os.listdir(OfficeChairs_dir)))

import tensorflow as tf
import keras_preprocessing
from keras_preprocessing import image
from keras_preprocessing.image import ImageDataGenerator

TRAINING_DIR = "/tmp/Chair/"
training_datagen = ImageDataGenerator(
      rescale = 1./255)

train_generator = training_datagen.flow_from_directory(
	TRAINING_DIR,
	target_size=(150,150),
	class_mode='categorical',
  batch_size=128
)


model = tf.keras.models.Sequential([
    # Note the input shape is the desired size of the image 150x150 with 3 bytes color
    # This is the first convolution
    tf.keras.layers.Conv2D(64, (3,3), activation='relu', input_shape=(150, 150, 3)),
    tf.keras.layers.MaxPooling2D(2, 2),
    # The second convolution
    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    # The third convolution
    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    # The fourth convolution
    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    # Flatten the results to feed into a DNN
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dropout(0.5),
    # 512 neuron hidden layer
    tf.keras.layers.Dense(512, activation='relu'),
    tf.keras.layers.Dense(10, activation='softmax')
])

model.summary()
model.compile(loss = 'categorical_crossentropy', optimizer='rmsprop', metrics=['accuracy'])

history = model.fit(train_generator, epochs=25, steps_per_epoch=5, verbose = 1)
#model.save("rps.h5")



import numpy as np
from google.colab import files
from keras.preprocessing import image

uploaded = files.upload()

for fn in uploaded.keys():
 
  # predicting images
  path = fn
  img = image.load_img(path, target_size=(150, 150))
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis=0)

  images = np.vstack([x])
  classes = model.predict(images, batch_size=10)
  print(fn)
  print(classes)